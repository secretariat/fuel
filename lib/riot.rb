require './lib/configer'
require './lib/model/link'

class Riot

  attr_accessor :initiator    # initiator - original URL to be shortened
  attr_accessor :dirty_words  # list of dirty words which coulb be generated by shortened
  attr_accessor :gconf        # global configuration file with primary application settings
  attr_accessor :link         # shortened url
  attr_accessor :short_part   # unique short part of the shortened url
  attr_accessor :db           # db connection

  CHARSETS = { :alpha => ('a'..'z').to_a,
               :alphanum => ('a'..'z').to_a + (0..9).to_a,
               :alphanumcase => ('a'..'z').to_a + (0..9).to_a + ('A'..'Z').to_a,
               :test => ['h','u','y'] }

  def initialize(link)
    @initiator = URI(link)
    @db = Configer.new.connect
    setup
  end

  def load_dirty_words
    @dirty_words = File.readlines("config/dirty.txt")
    @dirty_words.map!{|word| word = word.chomp}
  end

  def load_gconf
    @gconf = YAML::load(File.open("config/config.yml"))
  end

  def setup
    load_dirty_words
    load_gconf
  end

  def generate
    charset = CHARSETS[ @gconf['charset'].to_sym ]
    @short_part = (0...@gconf['unique_url_length'].to_i).map{ charset[rand(charset.size)]}.join

    unless dirty_link?
      @link = @gconf['domain'] + @short_part
      glink = Link.new( :original => @initiator.to_s, :short => @link )
      if glink.save
        puts @link
        save_to_store
      else
        puts "Exist...Generating new"
        generate
      end
    end 
  end

  def dirty_link?
    @dirty_words.include?(@short_part)
  end

  def save_to_store
    t = Time.now
    fname = "#{t.strftime("%Y%m%d_link_store.txt")}"
    File.open(fname, "a+") do |fd|
      fd.puts("#{@initiator.to_s};#{@link}")
      fd.close
    end
  end

end
